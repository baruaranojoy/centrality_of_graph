'''

Function CC_Value takes edge_list as input.
--------------------------------------------
Representation of input :
--------------------------------------------
[[2, 1, 3, 4, 5,...]
,[4, 5, 7, 9 ,.....]
,[7, 3, 5, 7, 87, 11,...]
,.....]
--------------------------------------------
Each cloumn represents the connection for one node i.e.,
the first element in each column is a unique element and
the other elements following it are the nodes connected
to the unique particular node.

Formula for CC_Value : (total number of edges present among the neighbours) / (total number of max. possible edges)

The CC_Value for any node is always in between 0 and 1
both extreem points included. If you get someting greater
than 1 then parallel edges are present in the graph you
should delete them.

If any particular node dosent have CC_Value or if its 
CC_Value can't be defined at present then it is assigned
a very high value i.e., 100 in this function.

It returns a list in which CC value of all nodes are
present as 1st tupple and followed by node number.
------------------------------------------------
Representation of out-put
------------------------------------------------
[[0.54 , 2]
,[0.47 , 4]
,[0.74 , 8]
,.................]
------------------------------------------------


'''




'''
This function is used to get the list of all nodes 
connected to one node specified in variable element.
'''
def get_row(edge_list, element):
    z = []
    k = 0
    for k in range(len(edge_list)):
        m = edge_list[k]
        if m[0] == element:
            z = m
    return z





'''
This function is used to find the total number
of connections among the neighbours.
'''
def compare(entry, row):
    k = 0
    count = 0
    xyz = []
    for k in range(len(entry)-1):
        l = entry[k+1]
        m = 0
        for m in range(len(row)-1):
            n = row[m+1]
            if l == n:
                count = count + 1
    return count






def CC_Value(edge_list):
    k = 0
    cc_vlaue_list = []
    for k in range(len(edge_list)):                                   ## reading each column one-by-one
        cc_val = 0.0                                                  ## cc_val holds the CC value
        entry = edge_list[k]
        l = 0 
        count = 0.0
        for l in range(len(entry)-1):                                 ## analysing each column
            if len(entry) == 1:                                       ## if the node is not connected to the
                cc_value = 100                                        ## graph the assigned a very high value
            else:
                element = entry[l+1]                                  ## storing the node
                row = get_row(edge_list, element)                     ## get all the nodes thhis node is connected to
                count = count + compare(entry, row)                   ## count the total number of possible edges present 
        count = float(count/2)                                        ## among neighbours and divide it by 2 because undirected graph
        total_possible = float(len(entry)-1)                          ## get number of elements connected to present node
        total_possible = float((total_possible*(total_possible))/2)   ## find the max. total possible number of edges among neighbour
        if total_possible == 0:
            cc_value = 100.0
        else:
            cc_value = float(count / total_possible)                  ## calculate the cc_value and store it with its resp. node
        cc_vlaue_list.append([cc_value , entry[0]])
    cc_vlaue_list.sort()                                              ## sort according to CC_Values
    return cc_vlaue_list                                              ## retuen CC_Value
